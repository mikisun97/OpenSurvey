'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import TinyMCEEditor from '@/components/ui/TinyMCEEditor';
import AdminHeader from '@/components/admin/AdminHeader';
import SystemManagementSidebar from '@/components/admin/SystemManagementSidebar';
import { getUserInfo, isAdmin } from '@/lib/auth';
import { bbsAPI } from '@/lib/api';
import { UserInfo, BbsVO, BbsMstVO } from '@/types';
import { 
  Save, 
  ArrowLeft,
  Eye,
  Calendar,
  User,
  ViewIcon,
  MessageSquare,
  Paperclip,
  X
} from 'lucide-react';
import FileUpload, { FileItem } from '@/components/ui/FileUpload';
import { toast } from 'sonner';

interface FormData {
  nttSj: string;
  nttCn: string;
  ntceAt: string;
  exposureYn: string;
  categoryCode: string | undefined;
  representImage?: File | null;  // 대표이미지 파일
  representImageId?: string;     // 대표이미지 ID
  representImageName?: string;   // 대표이미지 파일명
  mainImage?: File | null;       // 메인화면이미지 파일
  mainImageId?: string;          // 메인화면이미지 ID
  mainImageName?: string;        // 메인화면이미지 파일명
  multiImages?: File[];          // 다중이미지 파일들
}

export default function BoardEditPage() {
  const router = useRouter();
  const params = useParams();
  const bbsId = params.bbsId as string;
  const nttId = params.nttId as string;
  
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [boardDetail, setBoardDetail] = useState<BbsVO | null>(null);
  const [boardInfo, setBoardInfo] = useState<BbsMstVO | null>(null);
  const [formData, setFormData] = useState<FormData>({
    nttSj: '',
    nttCn: '',
    ntceAt: 'N',
    exposureYn: 'Y',
    categoryCode: undefined,
    representImage: null,
    representImageId: undefined,
    representImageName: undefined
  });

  // 파일 업로드 관련 상태
  const [selectedFiles, setSelectedFiles] = useState<FileItem[]>([]);
  const [uploadingFiles, setUploadingFiles] = useState(false);
  
  // 다중이미지 업로드 관련 상태
  const [selectedMultiImages, setSelectedMultiImages] = useState<FileItem[]>([]);
  
  // 대표이미지 관련 상태 (별도 관리)
  const [representativeImage, setRepresentativeImage] = useState<{
    id: string;
    name: string;
    url: string;
    size: number;
  } | null>(null);
  
  // 메인화면이미지 관련 상태 (별도 관리)
  const [mainImage, setMainImage] = useState<{
    id: string;
    name: string;
    url: string;
    size: number;
  } | null>(null);
  
  // 다중이미지 관련 상태 (별도 관리)
  const [multiImages, setMultiImages] = useState<Array<{
    id: string;
    name: string;
    url: string;
    size: number;
  }>>([]);
  
  // 삭제 예정인 파일들 상태 관리
  const [filesToDelete, setFilesToDelete] = useState<{
    attachments: Array<{atchFileId: string, fileSn: number}>;
    representativeImage: boolean;
    mainImage: boolean;
    multiImages: Array<{id: string, name: string}>;
  }>({
    attachments: [],
    representativeImage: false,
    mainImage: false,
    multiImages: []
  });

  // 구분 코드 관련 상태
  const [categoryDetailCodes, setCategoryDetailCodes] = useState<Array<{value: string, label: string}>>([]);
  const [showCategoryField, setShowCategoryField] = useState(false);

  // 권한 체크
  useEffect(() => {
    const user = getUserInfo();
    if (!user) {
      router.push('/login');
      return;
    }

    if (!isAdmin()) {
      router.push('/surveys');
      return;
    }

    setUserInfo(user);
  }, [router]);

  // 게시판 정보 조회
  const fetchBoardInfo = async () => {
    try {
      const response = await bbsAPI.getBbsMstDetail(bbsId);
      if (response.data.resultCode === 'SUCCESS') {
        const boardData = response.data.data;
        setBoardInfo(boardData);
        
        // 구분 코드 사용 여부에 따라 구분 코드 로드
        if (boardData.categoryCodeId) {
          await loadCategoryCodes(boardData.categoryCodeId);
        } else {
          setShowCategoryField(false);
          setCategoryDetailCodes([]);
        }
      } else {
        console.error('게시판 정보 조회 실패:', response.data.resultMessage);
        toast.error('게시판 정보를 불러오는데 실패했습니다.');
      }
    } catch (error) {
      console.error('게시판 정보 조회 오류:', error);
      toast.error('게시판 정보를 불러오는데 실패했습니다.');
    }
  };

  // 게시물 상세 조회
  const fetchBoardDetail = async () => {
    try {
      setLoading(true);
      const response = await bbsAPI.getBbsDetail(bbsId, parseInt(nttId));
      if (response.data.resultCode === 'SUCCESS') {
        const board = response.data.data;
        setBoardDetail(board);
        
        // 대표이미지 정보 별도 설정
        // 대표이미지 정보 설정
        
        if (board.representImageId && board.representImageName) {
          const representativeImageData = {
            id: board.representImageId,
            name: board.representImageName,
            url: board.representImageUrl || '',
            size: board.representImageSize || 0
          };
          // 대표이미지 상태 설정
          setRepresentativeImage(representativeImageData);
        } else {
          // 대표이미지 정보 없음
          setRepresentativeImage(null);
        }
        
        // 메인화면이미지 정보 별도 설정
        // 메인화면이미지 정보 설정
        
        if (board.mainImageId && board.mainImageName) {
          const mainImageData = {
            id: board.mainImageId,
            name: board.mainImageName,
            url: board.mainImageUrl || '',
            size: board.mainImageSize || 0
          };
          // 메인화면이미지 상태 설정
          setMainImage(mainImageData);
        } else {
          // 메인화면이미지 정보 없음
          setMainImage(null);
        }
        
        // 다중이미지 정보 별도 설정 (백엔드에서 다중이미지 목록을 제공한다고 가정)
        // 실제로는 백엔드에서 multiImageList 필드를 제공해야 함
        if (board.multiImageList && Array.isArray(board.multiImageList)) {
                  // 다중이미지 초기화
          
                     const multiImageData = board.multiImageList.map((img: {id?: string; atchFileId?: string; name?: string; orignlFileNm?: string; url?: string; fileUrl?: string; size?: number; fileSize?: number; fileSn?: number}, index: number) => {
             // fileSn을 사용해서 고유한 ID 생성 (atchFileId_fileSn 형태)
             // atchFileId의 공백 제거 후 사용
             const cleanAtchFileId = img.atchFileId ? img.atchFileId.trim() : '';
             const uniqueId = img.fileSn ? `${cleanAtchFileId}_${img.fileSn}` : `multi_${index}_${Date.now()}`;
             const result = {
               id: uniqueId, // 고유한 ID 보장
               name: img.name || img.orignlFileNm || '',
               url: img.url || img.fileUrl || '',
               size: img.size || img.fileSize || 0
             };
             // 이미지 변환
             return result;
           });
          
                     // 다중이미지 상태 설정
          setMultiImages(multiImageData);
        } else {
          // 다중이미지 정보 없음
          setMultiImages([]);
        }
        
        const newFormData = {
          nttSj: board.nttSj || '',
          nttCn: board.nttCn || '',
          ntceAt: board.ntceAt || 'N',
          exposureYn: board.exposureYn || 'Y',
          categoryCode: board.nttCategory || undefined  // null 대신 undefined 사용
        };
        
        setFormData(newFormData);
      } else {
        console.error('게시물 상세 조회 실패:', response.data.resultMessage);
        toast.error('게시물 정보를 불러오는데 실패했습니다.');
      }
    } catch (error) {
      console.error('게시물 상세 조회 오류:', error);
      toast.error('게시물 정보를 불러오는데 실패했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // 데이터 조회
  useEffect(() => {
    if (userInfo && bbsId && nttId) {
      fetchBoardInfo();
      fetchBoardDetail();
    }
  }, [userInfo, bbsId, nttId]);

  // 구분 코드 로드
  const loadCategoryCodes = async (categoryCodeId: string) => {
    try {
      if (!categoryCodeId) {
        setCategoryDetailCodes([]);
        setShowCategoryField(false);
        return;
      }

      const response = await bbsAPI.getCategoryCodeDetails(categoryCodeId);
      
      if (response.data && response.data.resultCode === 'SUCCESS') {
        const codes = response.data.data || [];
        setCategoryDetailCodes(codes);
        setShowCategoryField(true);
      } else {
        console.error('구분 코드 상세 목록 로드 실패:', response.data);
        setCategoryDetailCodes([]);
        setShowCategoryField(false);
      }
    } catch (error) {
      console.error('구분 코드 상세 목록 로드 중 오류 발생:', error);
      setCategoryDetailCodes([]);
      setShowCategoryField(false);
    }
  };

  // 파일 관련 함수들
  const handleFilesSelected = (files: File[]) => {
    const newFileItems: FileItem[] = files.map(file => ({
      id: `${Date.now()}_${Math.random()}`,
      file,
      status: 'pending' as const,
      progress: 0,
      name: file.name,
      size: file.size,
      type: file.type
    }));
    
    setSelectedFiles(prev => [...prev, ...newFileItems]);
  };

  const handleFileRemove = (fileId: string) => {
    setSelectedFiles(prev => prev.filter(f => f.id !== fileId));
  };
  
  // 대표이미지 삭제 함수 (지연 처리)
  const handleRepresentativeImageDelete = () => {
    console.log('=== 대표이미지 삭제 예정 디버깅 ===');
    console.log('현재 representativeImage 상태:', representativeImage);
    console.log('현재 filesToDelete 상태:', filesToDelete);
    console.log('=== 대표이미지 삭제 예정 디버깅 끝 ===');
    
    console.log('대표이미지 삭제 예정');
    
    // 삭제 예정 목록에 추가
    setFilesToDelete(prev => {
      const newState = {
        ...prev,
        representativeImage: true
      };
      return newState;
    });
    
    // UI에서 즉시 제거 (실제 삭제는 게시물 저장 시)
    setRepresentativeImage(null);
    
    setFormData(prev => {
      const newFormData = {
        ...prev,
        representImage: null,
        representImageId: undefined,
        representImageName: undefined
      };
      return newFormData;
    });
    
    toast.success('대표이미지가 삭제 예정 목록에 추가되었습니다. (게시물 저장 시 실제 삭제)');
  };
  
  // 메인화면이미지 삭제 함수 (지연 처리)
  const handleMainImageDelete = () => {
    // 메인화면이미지 삭제 처리
    
    // 삭제 예정 목록에 추가
    setFilesToDelete(prev => {
      const newState = {
        ...prev,
        mainImage: true
      };
      return newState;
    });
    
    // UI에서 즉시 제거 (실제 삭제는 게시물 저장 시)
    setMainImage(null);
    
    setFormData(prev => {
      const newFormData = {
        ...prev,
        mainImage: null,
        mainImageId: undefined,
        mainImageName: undefined
      };
      return newFormData;
    });
    
    toast.success('메인화면이미지가 삭제 예정 목록에 추가되었습니다. (게시물 저장 시 실제 삭제)');
  };
  
  // 다중이미지 삭제 함수 (지연 처리)
  const handleMultiImageDelete = (imageId: string, imageName: string) => {
             // 다중이미지 삭제 처리
    
    // 삭제 예정 목록에 추가
    setFilesToDelete(prev => {
      const newState = {
        ...prev,
        multiImages: [...prev.multiImages, { id: imageId, name: imageName }]
      };
      return newState;
    });
    
    // UI에서 즉시 제거 (실제 삭제는 게시물 저장 시)
    setMultiImages(prev => {
      const filtered = prev.filter(img => img.id !== imageId);
      return filtered;
    });
    toast.success('다중이미지가 삭제 예정 목록에 추가되었습니다. (게시물 저장 시 실제 삭제)');
  };
  
  // 다중이미지 파일 선택 처리
  const handleMultiImagesSelected = (files: File[]) => {
    
    // 최대 개수 체크 (기존 이미지 + 새로 선택된 이미지)
    const currentCount = multiImages.length + selectedMultiImages.length;
    const maxCount = boardInfo?.multiImageMaxCount || 10;
    
    if (currentCount + files.length > maxCount) {
      toast.error(`다중이미지는 최대 ${maxCount}개까지 업로드 가능합니다. (현재 ${currentCount}개)`);
      return;
    }
    
    // FileItem 형태로 변환
    const newFileItems: FileItem[] = files.map(file => ({
      id: `TEMP_${Date.now()}_${Math.random()}`,
      file,
      status: 'pending' as const,
      progress: 0,
      name: file.name,
      size: file.size,
      type: file.type
    }));
    
    setSelectedMultiImages(prev => [...prev, ...newFileItems]);
    
    // formData에도 추가
    setFormData(prev => ({
      ...prev,
      multiImages: [...(prev.multiImages || []), ...files]
    }));
    
    toast.success(`${files.length}개의 이미지가 추가되었습니다.`);
  };
  
  // 다중이미지 파일 제거 처리
  const handleMultiImageRemove = (fileId: string) => {
    setSelectedMultiImages(prev => prev.filter(f => f.id !== fileId));
    
    // formData에서도 제거
    setFormData(prev => ({
      ...prev,
      multiImages: prev.multiImages?.filter((_, index) => {
        const removedIndex = selectedMultiImages.findIndex(f => f.id === fileId);
        return index !== removedIndex;
      }) || []
    }));
  };
  
  // 삭제 예정 파일들을 실제로 삭제하는 함수
  const deleteScheduledFiles = async () => {
    try {
      // 1. 첨부파일 삭제
      for (const file of filesToDelete.attachments) {
        console.log('첨부파일 삭제 중:', file);
        await bbsAPI.deleteFile(file.atchFileId, file.fileSn);
      }
      
      // 2. 대표이미지 삭제
      console.log('=== 대표이미지 삭제 디버깅 ===');
      console.log('filesToDelete.representativeImage:', filesToDelete.representativeImage);
      console.log('representativeImage:', representativeImage);
      console.log('representativeImage?.id:', representativeImage?.id);
      console.log('=== 대표이미지 삭제 디버깅 끝 ===');
      
      if (filesToDelete.representativeImage && representativeImage?.id) {
        console.log('대표이미지 삭제 중:', representativeImage.id);
        // 대표이미지 삭제 API 호출
        await bbsAPI.deleteRepresentativeImage(representativeImage.id);
      } else {
        console.log('대표이미지 삭제 조건 불만족:');
        console.log('  - filesToDelete.representativeImage:', filesToDelete.representativeImage);
        console.log('  - representativeImage?.id:', representativeImage?.id);
      }
      
      // 3. 메인화면이미지 삭제
      console.log('=== 메인화면이미지 삭제 디버깅 ===');
      console.log('filesToDelete.mainImage:', filesToDelete.mainImage);
      console.log('mainImage:', mainImage);
      console.log('mainImage?.id:', mainImage?.id);
      console.log('=== 메인화면이미지 삭제 디버깅 끝 ===');
      
      if (filesToDelete.mainImage && mainImage?.id) {
        console.log('메인화면이미지 삭제 중:', mainImage.id);
        // 메인화면이미지 삭제 API 호출
        await bbsAPI.deleteMainImage(mainImage.id);
      } else {
        console.log('메인화면이미지 삭제 조건 불만족:');
        console.log('  - filesToDelete.mainImage:', filesToDelete.mainImage);
        console.log('  - mainImage?.id:', mainImage?.id);
      }
      
      // 4. 다중이미지 삭제
      for (const image of filesToDelete.multiImages) {
        console.log('다중이미지 삭제 중:', image.id);
        try {
          // image.id에서 atchFileId와 fileSn 분리
          // image.id 형태: 'FILE_1755658490942_5' -> atchFileId: 'FILE_1755658490942', fileSn: 5
          const parts = image.id.split('_');
          if (parts.length >= 2) {
            const fileSn = parseInt(parts[parts.length - 1]); // 마지막 부분이 fileSn
            const atchFileId = parts.slice(0, -1).join('_'); // 나머지 부분이 atchFileId
            
            console.log('다중이미지 삭제 정보:', { 
              originalId: image.id, 
              atchFileId, 
              fileSn 
            });
            
            // 다중이미지 삭제 API 호출
            await bbsAPI.deleteFile(atchFileId, fileSn);
          } else {
            console.error('다중이미지 ID 형식 오류:', image.id);
          }
        } catch (error) {
          console.error('다중이미지 삭제 실패:', error);
          // 삭제 실패해도 계속 진행
        }
      }
      
      // 3. 삭제 예정 목록 초기화
      setFilesToDelete({
        attachments: [],
        representativeImage: false,
        mainImage: false,
        multiImages: []
      });
      
      console.log('삭제 예정 파일들 모두 처리 완료');
    } catch (error) {
      console.error('삭제 예정 파일 처리 중 오류:', error);
      // 삭제 실패해도 게시물 수정은 성공으로 처리
    }
  };

  // 기존 첨부파일 삭제 함수 (지연 처리)
  const handleExistingFileDelete = (atchFileId: string, fileSn: number) => {
    console.log('기존 파일 삭제 예정:', { atchFileId, fileSn });
    
    // 삭제 예정 목록에 추가
    setFilesToDelete(prev => ({
      ...prev,
      attachments: [...prev.attachments, { atchFileId, fileSn }]
    }));
    
    // UI에서 즉시 제거 (실제 삭제는 게시물 저장 시)
    if (boardDetail && boardDetail.fileList) {
      setBoardDetail(prev => {
        if (!prev) return prev;
        return {
          ...prev,
          fileList: prev.fileList?.filter(file => file.fileSn !== fileSn) || []
        };
      });
    }
    
    toast.success('파일이 삭제 예정 목록에 추가되었습니다. (게시물 저장 시 실제 삭제)');
  };

  const uploadAllFiles = async (): Promise<{ atchFileId: string | null; fileList: unknown[] }> => {
    if (selectedFiles.length === 0) {
      return { atchFileId: null, fileList: [] };
    }

    setUploadingFiles(true);
    
    try {
      // 파일 업로드 API 호출
      const formData = new FormData();
      selectedFiles.forEach(fileItem => {
        formData.append('files', fileItem.file);
      });

      const response = await bbsAPI.uploadFiles(formData);
      
      if (response.data.resultCode === 'SUCCESS') {
        // 업로드 성공 시 파일 상태 업데이트
        setSelectedFiles(prev => prev.map(f => ({
          ...f,
          status: 'success' as const,
          progress: 100
        })));

        // 백엔드 응답에서 atchFileId와 파일 정보 추출
        const responseData = response.data.data;
        const atchFileId = responseData.atchFileId;
        const uploadedFiles = responseData.uploadedFiles || [];
        
        console.log('=== 파일 업로드 응답 처리 ===');
        console.log('atchFileId:', atchFileId);
        console.log('업로드된 파일 수:', uploadedFiles.length);
        console.log('업로드된 파일 목록:', uploadedFiles);
        
        return { atchFileId, fileList: uploadedFiles };
      } else {
        throw new Error(response.data.resultMessage || '파일 업로드에 실패했습니다.');
      }
    } catch (error) {
      console.error('파일 업로드 실패:', error);
      
      // 업로드 실패 시 파일 상태 업데이트
      setSelectedFiles(prev => prev.map(f => ({
        ...f,
        status: 'error' as const
      })));
      
      throw error;
    } finally {
      setUploadingFiles(false);
    }
  };

  const handleSave = async () => {
    if (!formData.nttSj.trim()) {
      toast.error('제목을 입력해주세요.');
      return;
    }

    if (!formData.nttCn.trim()) {
      toast.error('내용을 입력해주세요.');
      return;
    }

    // 구분 사용하는 게시판에서는 구분 선택 필수
    if (showCategoryField && !formData.categoryCode) {
      toast.error('구분을 선택해주세요.');
      return;
    }

    try {
      setSaving(true);
      
      // 1단계: 파일 업로드 (새 파일이 있는 경우에만)
      let finalAtchFileId: string | undefined = boardDetail?.atchFileId || undefined; // 기본적으로 기존 atchFileId 유지
      
      if (selectedFiles.length > 0) {
        if (boardDetail?.atchFileId) {
          // 기존 첨부파일이 있으면 기존 그룹에 새 파일 추가
          console.log('기존 그룹에 새 파일 추가:', boardDetail.atchFileId);
          const formData = new FormData();
          selectedFiles.forEach(fileItem => {
            formData.append('files', fileItem.file);
          });
          
          const addResult = await bbsAPI.addFilesToExistingGroup(boardDetail.atchFileId, formData);
          if (addResult.data.resultCode === 'SUCCESS') {
            console.log('기존 그룹에 파일 추가 완료');
            finalAtchFileId = boardDetail.atchFileId; // 기존 atchFileId 유지
          } else {
            throw new Error('기존 그룹에 파일 추가 실패');
          }
        } else {
          // 기존 첨부파일이 없으면 새 그룹 생성
          console.log('새 파일 그룹 생성');
          const uploadResult = await uploadAllFiles();
          finalAtchFileId = uploadResult.atchFileId || undefined;
          console.log('새 파일 업로드 완료, atchFileId:', finalAtchFileId);
        }
      } else {
        console.log('새로 선택된 파일 없음, 기존 atchFileId 유지');
      }
      
      // 2단계: 대표이미지 처리
      let representativeImageId: string | undefined;
      let representativeImageName: string | undefined;
      
      if (formData.representImage) {
        // 새 이미지가 있는 경우 (추가 또는 삭제 후 추가)
        console.log('대표이미지 업로드 중...');
        
        // 1. 기존 대표이미지가 있거나 삭제 예정인 경우 삭제
        if (representativeImage?.id || filesToDelete.representativeImage) {
          if (representativeImage?.id) {
            console.log('기존 대표이미지 삭제 중:', representativeImage.id);
            try {
              await bbsAPI.deleteRepresentativeImage(representativeImage.id);
              console.log('기존 대표이미지 삭제 완료');
            } catch (error) {
              console.error('기존 대표이미지 삭제 실패:', error);
              // 삭제 실패해도 새 이미지 업로드는 계속 진행
            }
          } else if (filesToDelete.representativeImage) {
            console.log('이미 삭제 예정으로 처리된 대표이미지');
          }
        }
        
        // 2. 새 이미지 업로드
        const imageFormData = new FormData();
        imageFormData.append('files', formData.representImage);
        imageFormData.append('usageType', 'REPRESENTATIVE');
        
        try {
          const response = await bbsAPI.uploadFiles(imageFormData);
          if (response.data.resultCode === 'SUCCESS') {
            const uploadedFiles = response.data.data.uploadedFiles || [];
            if (uploadedFiles.length > 0) {
              representativeImageId = uploadedFiles[0].streFileNm; // 실제 저장된 파일명
              representativeImageName = formData.representImage.name;
              console.log('대표이미지 업로드 성공:', representativeImageId);
            } else {
              console.error('업로드된 파일 정보가 없음');
              toast.error('대표이미지 업로드에 실패했습니다.');
              return;
            }
          } else {
            console.error('대표이미지 업로드 실패:', response.data.resultMessage);
            toast.error('대표이미지 업로드에 실패했습니다.');
            return;
          }
        } catch (error) {
          console.error('대표이미지 업로드 중 오류:', error);
          toast.error('대표이미지 업로드 중 오류가 발생했습니다.');
          return;
        }
      } else if (filesToDelete.representativeImage) {
        // 삭제만 하는 경우
        console.log('대표이미지만 삭제 처리');
        representativeImageId = ""; // 빈 문자열로 삭제 의도 표시
        representativeImageName = "";
        console.log('대표이미지 삭제 신호 전송:', representativeImageId);
      } else {
        // 기존 이미지 유지 (변경 없음)
        console.log('=== 대표이미지 상태 디버깅 ===');
        console.log('representativeImage 전체:', representativeImage);
        console.log('representativeImage?.id:', representativeImage?.id);
        console.log('representativeImage?.name:', representativeImage?.name);
        console.log('representativeImage?.url:', representativeImage?.url);
        console.log('representativeImage?.size:', representativeImage?.size);
        console.log('=== 대표이미지 상태 디버깅 끝 ===');
        
        representativeImageId = undefined;  // 변경 없음 - undefined로 전송
        representativeImageName = undefined;  // 변경 없음 - undefined로 전송
        console.log('대표이미지 수정 안함, 기존 이미지 유지 - null 전송:', representativeImageId);
      }
      
      // 3단계: 메인화면이미지 처리
      let mainImageId: string | undefined;
      let mainImageName: string | undefined;
      
      if (formData.mainImage) {
        // 새 이미지가 있는 경우 (추가 또는 삭제 후 추가)
        console.log('메인화면이미지 업로드 중...');
        
        // 1. 기존 메인화면이미지가 있거나 삭제 예정인 경우 삭제
        if (mainImage?.id || filesToDelete.mainImage) {
          if (mainImage?.id) {
            console.log('기존 메인화면이미지 삭제 중:', mainImage.id);
            try {
              await bbsAPI.deleteMainImage(mainImage.id);
              console.log('기존 메인화면이미지 삭제 완료');
            } catch (error) {
              console.error('기존 메인화면이미지 삭제 실패:', error);
              // 삭제 실패해도 새 이미지 업로드는 계속 진행
            }
          } else if (filesToDelete.mainImage) {
            console.log('이미 삭제 예정으로 처리된 메인화면이미지');
          }
        }
        
        // 2. 새 이미지 업로드
        const imageFormData = new FormData();
        imageFormData.append('files', formData.mainImage);
        imageFormData.append('usageType', 'MAIN_IMAGE');
        
        try {
          const response = await bbsAPI.uploadFiles(imageFormData);
          if (response.data.resultCode === 'SUCCESS') {
            const uploadedFiles = response.data.data.uploadedFiles || [];
            if (uploadedFiles.length > 0) {
              mainImageId = uploadedFiles[0].streFileNm; // 실제 저장된 파일명
              mainImageName = formData.mainImage.name;
              console.log('메인화면이미지 업로드 성공:', mainImageId);
            } else {
              console.error('업로드된 파일 정보가 없음');
              toast.error('메인화면이미지 업로드에 실패했습니다.');
              return;
            }
          } else {
            console.error('메인화면이미지 업로드 실패:', response.data.resultMessage);
            toast.error('메인화면이미지 업로드에 실패했습니다.');
            return;
          }
        } catch (error) {
          console.error('메인화면이미지 업로드 중 오류:', error);
          toast.error('메인화면이미지 업로드 중 오류가 발생했습니다.');
          return;
        }
      } else if (filesToDelete.mainImage) {
        // 삭제만 하는 경우
        console.log('메인화면이미지만 삭제 처리');
        mainImageId = ""; // 빈 문자열로 삭제 의도 표시
        mainImageName = "";
        console.log('메인화면이미지 삭제 신호 전송:', mainImageId);
      } else {
        // 기존 이미지 유지 (변경 없음)
        console.log('=== 메인화면이미지 상태 디버깅 ===');
        console.log('mainImage 전체:', mainImage);
        console.log('mainImage?.id:', mainImage?.id);
        console.log('mainImage?.name:', mainImage?.name);
        console.log('mainImage?.url:', mainImage?.url);
        console.log('mainImage?.size:', mainImage?.size);
        console.log('=== 메인화면이미지 상태 디버깅 끝 ===');
        
        mainImageId = undefined;  // 변경 없음 - undefined로 전송
        mainImageName = undefined;  // 변경 없음 - undefined로 전송
        console.log('메인화면이미지 수정 안함, 기존 이미지 유지 - null 전송:', mainImageId);
      }
      
      // 4단계: 다중이미지 처리
      let multiImageIds: string[] = [];
      let multiImageNames: string[] = [];
      
      if (selectedMultiImages.length > 0) {
        console.log('다중이미지 업로드 중...');
        
        // 새로 선택된 다중이미지들 업로드
        const imageFormData = new FormData();
        selectedMultiImages.forEach(fileItem => {
          imageFormData.append('files', fileItem.file);
        });
        imageFormData.append('usageType', 'MULTI_IMAGE');
        
        try {
          const response = await bbsAPI.uploadFiles(imageFormData);
          if (response.data.resultCode === 'SUCCESS') {
            const uploadedFiles = response.data.data.uploadedFiles || [];
            multiImageIds = uploadedFiles.map((file: {streFileNm: string}) => file.streFileNm);
            multiImageNames = selectedMultiImages.map(fileItem => fileItem.name);
            console.log('다중이미지 업로드 성공:', multiImageIds);
          } else {
            console.error('다중이미지 업로드 실패:', response.data.resultMessage);
            toast.error('다중이미지 업로드에 실패했습니다.');
            return;
          }
        } catch (error) {
          console.error('다중이미지 업로드 중 오류:', error);
          toast.error('다중이미지 업로드 중 오류가 발생했습니다.');
          return;
        }
      } else {
        // 기존 다중이미지는 서버로 전송하지 않음 (첨부파일과 동일한 방식)
        multiImageIds = [];
        multiImageNames = [];
        console.log('다중이미지 수정 안함, 기존 이미지는 서버로 전송하지 않음');
        console.log('삭제 예정 다중이미지:', filesToDelete.multiImages);
      }
      
      // 4단계: 게시물 저장 (파일은 이미 업로드됨)
      const updateData = {
        bbsId: bbsId,
        nttId: parseInt(nttId),
        nttSj: formData.nttSj.trim(),
        nttCn: formData.nttCn.trim(),
        ntceAt: formData.ntceAt,
        exposureYn: formData.exposureYn,
        atchFileId: finalAtchFileId || undefined,
        nttCategory: formData.categoryCode || undefined, // null 대신 undefined 사용
        representImageId: representativeImageId,
        representImageName: representativeImageName,
        representImageSize: formData.representImage ? formData.representImage.size : (representativeImage?.size || undefined),
        mainImageId: mainImageId,
        mainImageName: mainImageName,
        mainImageSize: formData.mainImage ? formData.mainImage.size : (mainImage?.size || undefined),
        multiImageIds: multiImageIds,
        multiImageNames: multiImageNames
      };

      console.log('=== 파일 처리 정보 ===');
      console.log('기존 게시물 atchFileId:', boardDetail?.atchFileId);
      console.log('최종 사용할 atchFileId:', finalAtchFileId);
      console.log('=====================');

      console.log('=== 게시물 수정 디버깅 정보 ===');
      console.log('1. 요청 URL:', `/sym/bbs/${bbsId}/boards/${nttId}`);
      console.log('2. 현재 사용자:', userInfo);
      console.log('3. boardDetail 원본 데이터:', JSON.stringify(boardDetail, null, 2));
      console.log('4. formData 입력 데이터:', JSON.stringify(formData, null, 2));
      console.log('5. 최종 요청 데이터:', JSON.stringify(updateData, null, 2));
      console.log('6. 각 필드별 값 확인:');
      console.log('   - nttSj:', updateData.nttSj, '(타입:', typeof updateData.nttSj, ')');
      console.log('   - nttCn:', updateData.nttCn ? '내용있음' : '내용없음', '(타입:', typeof updateData.nttCn, ')');
      console.log('   - ntceAt:', updateData.ntceAt, '(타입:', typeof updateData.nttSj, ')');
      console.log('   - exposureYn:', updateData.exposureYn, '(타입:', typeof updateData.exposureYn, ')');
      console.log('   - representImageId:', updateData.representImageId, '(타입:', typeof updateData.representImageId, ')');
      console.log('   - representImageName:', updateData.representImageName, '(타입:', typeof updateData.representImageName, ')');
      console.log('   - mainImageId:', updateData.mainImageId, '(타입:', typeof updateData.mainImageId, ')');
      console.log('   - mainImageName:', updateData.mainImageName, '(타입:', typeof updateData.mainImageName, ')');

      console.log('=== 디버깅 정보 끝 ===');
      
      const response = await bbsAPI.updateBbs(bbsId, parseInt(nttId), updateData);
      
      console.log('=== 게시물 수정 응답 정보 ===');
      console.log('응답 전체:', response);
      console.log('응답 상태:', response.status, response.statusText);
      console.log('응답 헤더:', response.headers);
      console.log('응답 데이터:', response.data);
      console.log('=== 응답 정보 끝 ===');
      
      if (response.data && response.data.resultCode === 'SUCCESS') {
        // 4단계: 삭제 예정 파일들 실제 삭제
        await deleteScheduledFiles();
        
        toast.success('게시물이 수정되었습니다.');
        router.push(`/admin/cms/board/${bbsId}/${nttId}`);
      } else {
        console.error('=== 게시물 수정 실패 상세 정보 ===');
        console.error('응답 상태:', response.status);
        console.error('응답 데이터:', response.data);
        console.error('결과 코드:', response.data?.resultCode);
        console.error('결과 메시지:', response.data?.resultMessage);
        console.error('에러 데이터:', response.data?.data);
        console.error('페이지네이션 정보:', response.data?.paginationInfo);
        console.error('=== 실패 정보 끝 ===');
        toast.error(`게시물 수정에 실패했습니다: ${response.data?.resultMessage || '알 수 없는 오류'}`);
      }
    } catch (error) {
      console.error('게시물 수정 실패:', error);
      const axiosError = error as { response?: { data?: { resultMessage?: string } }; message?: string };
      if (axiosError.response) {
        console.error('에러 응답:', axiosError.response.data);
        toast.error(`게시물 수정 중 오류가 발생했습니다: ${axiosError.response.data?.resultMessage || axiosError.message || '알 수 없는 오류'}`);
      } else {
        toast.error('게시물 수정 중 오류가 발생했습니다.');
      }
    } finally {
      setSaving(false);
    }
  };

  const handleBackToDetail = () => {
    router.push(`/admin/cms/board/${bbsId}/${nttId}`);
  };

  const handleBackToList = () => {
    router.push(`/admin/cms/board/${bbsId}`);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">게시물을 불러오는 중...</p>
        </div>
      </div>
    );
  }

  if (!boardDetail) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">게시물을 찾을 수 없습니다.</h1>
          <Button onClick={handleBackToList}>
            목록으로 돌아가기
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminHeader />
      <div className="flex pt-16">
        <SystemManagementSidebar />
        
        {/* 메인 콘텐츠 - QuickFlow 스타일 */}
        <main className="ml-72 bg-gray-50 h-[calc(100vh-64px)] w-[calc(100vw-288px)] flex flex-col">
          {/* 상단 헤더 - 게시물 상세보기와 동일한 스타일 */}
          <div className="bg-white border-b border-gray-300 flex-shrink-0">
            {/* 타이틀 부분 - 게시물 상세보기와 동일한 UI */}
            <div className="px-8 py-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">
                    {boardInfo?.bbsNm || '게시판'} 수정
                  </h1>
                </div>
                <div className="flex space-x-3">
                  <Button
                    variant="outline"
                    onClick={handleBackToDetail}
                    className="text-sm"
                  >
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    상세보기
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* 메인 콘텐츠 영역 */}
          <div className="px-8 py-8 flex-1 overflow-y-auto">
            <div className="bg-white rounded-lg border border-gray-300 overflow-hidden">
              {/* 수정 폼 */}
              <div className="p-6">
                <div className="space-y-6">
                  {/* 제목 입력 */}
                  <div className="space-y-2">
                    <Label htmlFor="nttSj" className="block text-sm font-medium text-gray-700">
                      제목 <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="nttSj"
                      value={formData.nttSj}
                      onChange={(e) => setFormData({...formData, nttSj: e.target.value})}
                      placeholder="게시물 제목을 입력하세요"
                      className="text-sm"
                    />
                  </div>

                  {/* 공지여부 및 공개여부 설정 - 한 줄에 배치 */}
                  <div className="flex space-x-8">
                    {/* 공지여부 설정 */}
                    <div className="flex-1 space-y-2">
                      <Label className="block text-sm font-medium text-gray-700">
                        공지여부
                      </Label>
                      <RadioGroup 
                        value={formData.ntceAt} 
                        onValueChange={(value: string) => setFormData({...formData, ntceAt: value})}
                        className="flex space-x-6"
                      >
                        <div className="flex items-center space-x-3">
                          <RadioGroupItem value="N" id="ntce-n" className="w-5 h-5" />
                          <Label htmlFor="ntce-n" className="text-sm">일반</Label>
                        </div>
                        <div className="flex items-center space-x-3">
                          <RadioGroupItem value="Y" id="ntce-y" className="w-5 h-5" />
                          <Label htmlFor="ntce-y" className="text-sm">공지</Label>
                        </div>
                      </RadioGroup>
                    </div>

                    {/* 공개여부 설정 */}
                    <div className="flex-1 space-y-2">
                      <Label className="block text-sm font-medium text-gray-700">
                        공개여부
                      </Label>
                      <RadioGroup 
                        value={formData.exposureYn} 
                        onValueChange={(value: string) => setFormData({...formData, exposureYn: value})}
                        className="flex space-x-6"
                      >
                        <div className="flex items-center space-x-3">
                          <RadioGroupItem value="Y" id="exposure-y" className="w-5 h-5" />
                          <Label htmlFor="exposure-y" className="text-sm">공개</Label>
                        </div>
                        <div className="flex items-center space-x-3">
                          <RadioGroupItem value="N" id="exposure-n" className="w-5 h-5" />
                          <Label htmlFor="exposure-n" className="text-sm">비공개</Label>
                        </div>
                      </RadioGroup>
                    </div>
                  </div>

                  {/* 구분 선택 - 게시판에서 구분을 사용하는 경우에만 표시 */}
                  {showCategoryField && (
                    <div className="space-y-2">
                      <Label htmlFor="categoryCode" className="block text-sm font-medium text-gray-700">
                        구분 <span className="text-red-500">*</span>
                      </Label>
                      
                      <Select 
                        value={formData.categoryCode || ''} 
                        onValueChange={(value: string) => setFormData({...formData, categoryCode: value})}
                      >
                        <SelectTrigger className="w-full text-sm">
                          <SelectValue placeholder="구분을 선택하세요" />
                        </SelectTrigger>
                        <SelectContent>
                          {categoryDetailCodes.map((category) => (
                            <SelectItem key={category.value} value={category.value} className="text-sm">
                              {category.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  )}

                  {/* 대표이미지 설정 - 게시판에서 대표이미지를 사용하는 경우에만 표시 */}
                  {boardInfo?.representImageUseAt === 'Y' && (
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Label className="block text-sm font-medium text-gray-700">
                          대표이미지 <span className="text-red-500">*</span>
                        </Label>
                        {boardInfo.representImageWidth && boardInfo.representImageHeight && (
                          <span className="text-xs text-gray-500">
                            (해상도 {boardInfo.representImageWidth} × {boardInfo.representImageHeight}px, PNG)
                          </span>
                        )}
                      </div>
                      
                      <div className="space-y-4">
                        {/* 대표이미지 썸네일 컴포넌트 */}
                        <div className="flex items-start space-x-4">
                          {/* 현재 이미지 썸네일 */}
                          {representativeImage ? (
                            <div className="relative">
                              <div className="border border-gray-200 rounded-lg overflow-hidden cursor-pointer hover:border-gray-400 transition-colors">
                                <img 
                                  src={representativeImage.url} 
                                  alt="현재 대표이미지"
                                  className="max-h-24 object-contain bg-gray-50"
                                  onClick={() => {
                                    const input = document.getElementById('representImage') as HTMLInputElement;
                                    input?.click();
                                  }}
                                />
                              </div>
                              {/* 삭제 버튼 */}
                              <button
                                onClick={handleRepresentativeImageDelete}
                                className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors shadow-sm"
                                title="대표이미지 삭제"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          ) : (
                            /* 이미지가 없을 때 업로드 영역 */
                            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 transition-colors cursor-pointer">
                              <input
                                type="file"
                                id="representImage"
                                accept="image/*"
                                onChange={(e) => {
                                  const file = e.target.files?.[0] || null;
                                  if (file) {
                                    // 파일을 임시 ID로 설정 (실제로는 업로드 후 받은 ID를 사용해야 함)
                                    const tempId = `TEMP_${Date.now()}`;
                                    setFormData({
                                      ...formData, 
                                      representImage: file,
                                      representImageId: tempId,
                                      representImageName: file.name
                                    });
                                  } else {
                                    setFormData({
                                      ...formData, 
                                      representImage: null,
                                      representImageId: undefined,
                                      representImageName: undefined
                                    });
                                  }
                                }}
                                className="hidden"
                              />
                              <label 
                                htmlFor="representImage" 
                                className="cursor-pointer flex flex-col items-center space-y-2"
                              >
                                <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                  </svg>
                                </div>
                                <div className="space-y-1">
                                  <p className="text-xs font-medium text-gray-700">이미지 추가</p>
                                </div>
                              </label>
                            </div>
                          )}
                          
                          {/* 새로운 이미지 선택 시 썸네일 */}
                          {formData.representImage && (
                            <div className="relative">
                              <div className="border border-blue-200 rounded-lg overflow-hidden">
                                <img 
                                  src={URL.createObjectURL(formData.representImage)} 
                                  alt="선택된 이미지"
                                  className="max-h-24 object-contain bg-blue-50"
                                />
                              </div>
                              {/* 선택 취소 버튼 */}
                              <button
                                onClick={() => setFormData({
                                  ...formData, 
                                  representImage: null,
                                  representImageId: undefined,
                                  representImageName: undefined
                                })}
                                className="absolute -top-2 -right-2 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors shadow-sm"
                                title="선택 취소"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          )}
                        </div>
                      
                      </div>
                    </div>
                  )}

                  {/* 메인화면이미지 설정 - 게시판에서 메인화면이미지를 사용하는 경우에만 표시 */}
                  {boardInfo?.mainImageUseAt === 'Y' && (
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Label className="block text-sm font-medium text-gray-700">
                          메인화면이미지
                        </Label>
                        {boardInfo.mainImageWidth && boardInfo.mainImageHeight && (
                          <span className="text-xs text-gray-500">
                            (해상도 {boardInfo.mainImageWidth} × {boardInfo.mainImageHeight}px, PNG)
                          </span>
                        )}
                      </div>
                      
                      <div className="space-y-4">
                        {/* 메인화면이미지 썸네일 컴포넌트 */}
                        <div className="flex items-start space-x-4">
                          {/* 현재 이미지 썸네일 */}
                          {mainImage ? (
                            <div className="relative">
                              <div className="border border-gray-200 rounded-lg overflow-hidden cursor-pointer hover:border-gray-400 transition-colors">
                                <img 
                                  src={mainImage.url} 
                                  alt="현재 메인화면이미지"
                                  className="max-h-24 object-contain bg-gray-50"
                                  onClick={() => {
                                    const input = document.getElementById('mainImage') as HTMLInputElement;
                                    input?.click();
                                  }}
                                />
                              </div>
                              {/* 삭제 버튼 */}
                              <button
                                onClick={handleMainImageDelete}
                                className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors shadow-sm"
                                title="메인화면이미지 삭제"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          ) : (
                            /* 이미지가 없을 때 업로드 영역 */
                            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 transition-colors cursor-pointer">
                              <input
                                type="file"
                                id="mainImage"
                                accept="image/*"
                                onChange={(e) => {
                                  const file = e.target.files?.[0] || null;
                                  if (file) {
                                    // 파일을 임시 ID로 설정 (실제로는 업로드 후 받은 ID를 사용해야 함)
                                    const tempId = `TEMP_${Date.now()}`;
                                    setFormData({
                                      ...formData, 
                                      mainImage: file,
                                      mainImageId: tempId,
                                      mainImageName: file.name
                                    });
                                  } else {
                                    setFormData({
                                      ...formData, 
                                      mainImage: null,
                                      mainImageId: undefined,
                                      mainImageName: undefined
                                    });
                                  }
                                }}
                                className="hidden"
                              />
                              <label 
                                htmlFor="mainImage" 
                                className="cursor-pointer flex flex-col items-center space-y-2"
                              >
                                <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                  </svg>
                                </div>
                                <div className="space-y-1">
                                  <p className="text-xs font-medium text-gray-700">이미지 추가</p>
                                </div>
                              </label>
                            </div>
                          )}
                          
                          {/* 새로운 이미지 선택 시 썸네일 */}
                          {formData.mainImage && (
                            <div className="relative">
                              <div className="border border-blue-200 rounded-lg overflow-hidden">
                                <img 
                                  src={URL.createObjectURL(formData.mainImage)} 
                                  alt="선택된 이미지"
                                  className="max-h-24 object-contain bg-blue-50"
                                />
                              </div>
                              {/* 선택 취소 버튼 */}
                              <button
                                onClick={() => setFormData({
                                  ...formData, 
                                  mainImage: null,
                                  mainImageId: undefined,
                                  mainImageName: undefined
                                })}
                                className="absolute -top-2 -right-2 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors shadow-sm"
                                title="선택 취소"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}

                  {/* 다중이미지 설정 - 게시판에서 다중이미지를 사용하는 경우에만 표시 */}
                  {boardInfo?.multiImageUseAt === 'Y' && (
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Label className="block text-sm font-medium text-gray-700">
                          {boardInfo.multiImageDisplayName || '다중이미지'}
                        </Label>
                        {boardInfo.multiImageMaxCount && (
                          <span className="text-xs text-gray-500">
                            (최대 {boardInfo.multiImageMaxCount}개)
                          </span>
                        )}
                        {boardInfo.multiImageWidth && boardInfo.multiImageHeight && (
                          <span className="text-xs text-gray-500">
                            (해상도 {boardInfo.multiImageWidth} × {boardInfo.multiImageHeight}px)
                          </span>
                        )}
                      </div>
                      
                      <div className="space-y-4">
                        {/* 현재 다중이미지 목록 */}
                        {multiImages.length > 0 && (
                          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {multiImages.map((image, index) => (
                              <div key={index} className="relative group">
                                <div className="border border-gray-200 rounded-lg overflow-hidden">
                                  <img 
                                    src={image.url} 
                                    alt={`다중이미지 ${index + 1}`}
                                    className="w-full h-24 object-cover"
                                  />
                                </div>
                                {/* 삭제 버튼 */}
                                <button
                                  onClick={() => handleMultiImageDelete(image.id, image.name)}
                                  className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors shadow-sm opacity-0 group-hover:opacity-100"
                                  title="이미지 삭제"
                                >
                                  <X className="w-3 h-3" />
                                </button>
                              </div>
                            ))}
                          </div>
                        )}
                        
                                                {/* 다중이미지 업로드 컴포넌트 (드래그앤드롭만 표시) */}
                        <FileUpload
                          selectedFiles={selectedMultiImages}
                          onFilesSelected={handleMultiImagesSelected}
                          onFileRemove={handleMultiImageRemove}
                          maxFiles={boardInfo.multiImageMaxCount || 10}
                          maxSize={10}
                          acceptedTypes={['image/*']}
                          disabled={saving || uploadingFiles}
                          title={`${boardInfo.multiImageDisplayName || '다중이미지'}를 드래그하거나 클릭하여 업로드`}
                          description={`최대 ${boardInfo.multiImageMaxCount || 10}개, 10MB 이하`}
                          hideList
                        />

                        {/* 새로 선택된 다중이미지 썸네일 목록 */}
                        {selectedMultiImages.length > 0 && (
                          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            {selectedMultiImages.map((fileItem) => (
                              <div key={fileItem.id} className="relative group">
                                <div className="border border-blue-200 rounded-lg overflow-hidden">
                                  <img 
                                    src={URL.createObjectURL(fileItem.file)} 
                                    alt={fileItem.name}
                                    className="w-full h-24 object-cover bg-blue-50"
                                  />
                                </div>
                                <button
                                  onClick={() => handleMultiImageRemove(fileItem.id)}
                                  className="absolute -top-2 -right-2 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors shadow-sm"
                                  title="선택 취소"
                                >
                                  <X className="w-3 h-3" />
                                </button>
                                <div className="mt-1 text-xs text-gray-600 truncate">
                                  {fileItem.name}
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                          
                        {/* 현재 개수 표시 */}
                        {(multiImages.length > 0 || selectedMultiImages.length > 0) && (
                          <div className="text-sm text-gray-600">
                            현재 {multiImages.length + selectedMultiImages.length}개 / 최대 {boardInfo.multiImageMaxCount || 10}개
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* 내용 입력 */}
                  <div className="space-y-2">
                    <Label htmlFor="nttCn" className="block text-sm font-medium text-gray-700">
                      내용 <span className="text-red-500">*</span>
                    </Label>
                    <TinyMCEEditor
                      content={formData.nttCn}
                      onChange={(content) => setFormData({...formData, nttCn: content})}
                    />
                  </div>

                  {/* 첨부파일 설정 - 게시판 설정에 따라 표시 */}
                  {boardInfo?.fileAtchPosblAt === 'Y' && (
                    <div className="space-y-2">
                      <Label className="block text-sm font-medium text-gray-700">
                        첨부파일
                        {boardInfo.atchPosblFileNumber && (
                          <span className="text-xs text-gray-500 ml-2">
                            (최대 {boardInfo.atchPosblFileNumber}개)
                          </span>
                        )}
                        {boardInfo.atchPosblFileSize && (
                          <span className="text-xs text-gray-500 ml-2">
                            ({Math.round(boardInfo.atchPosblFileSize / 1024 / 1024)}MB 이하)
                          </span>
                        )}
                      </Label>
                      
                      {/* 새로운 파일 업로드 컴포넌트 */}
                      <FileUpload
                        selectedFiles={selectedFiles}
                        onFilesSelected={handleFilesSelected}
                        onFileRemove={handleFileRemove}
                        maxFiles={boardInfo.atchPosblFileNumber || 5}
                        maxSize={boardInfo.atchPosblFileSize ? Math.round(boardInfo.atchPosblFileSize / 1024 / 1024) : 10}
                        disabled={saving || uploadingFiles}
                        title="첨부파일을 드래그하거나 클릭하여 업로드"
                        description={`최대 ${boardInfo.atchPosblFileNumber || 5}개, ${boardInfo.atchPosblFileSize ? Math.round(boardInfo.atchPosblFileSize / 1024 / 1024) : 10}MB 이하`}
                      />
                      
                      {/* 기존 첨부파일 표시 */}
                      {boardDetail?.fileList && boardDetail.fileList.length > 0 && (
                        <div className="mt-4 p-4 bg-gray-50 rounded-md border border-gray-200">
                          <div className="flex items-center space-x-2 text-gray-900 mb-2">
                            <Paperclip className="w-4 h-4 text-gray-500" />
                            <span className="text-sm font-medium">현재 첨부된 파일 ({boardDetail.fileList.length}개)</span>
                          </div>
                          <div className="space-y-1">
                            {boardDetail.fileList.map((file, index) => (
                              <div key={index} className="flex items-center justify-between p-2 bg-white rounded-md border border-gray-200">
                                <div className="flex items-center space-x-2 text-sm text-gray-600">
                                  <Paperclip className="w-3 h-3" />
                                  <button className="text-blue-600 hover:text-blue-800 hover:underline cursor-pointer">
                                    {file.orignlFileNm}
                                  </button>
                                  <span className="text-gray-400">({file.fileSize ? Math.round(file.fileSize / 1024) : 0}KB)</span>
                                </div>
                                <Button
                                  onClick={() => handleExistingFileDelete(file.atchFileId, file.fileSn)}
                                  variant="outline"
                                  size="sm"
                                  className="h-8 px-2 text-xs text-red-600 border-red-200 hover:bg-red-50"
                                >
                                  파일삭제
                                </Button>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {/* 하단 버튼 */}
                  <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                    <Button
                      onClick={handleSave}
                      disabled={saving || uploadingFiles}
                      className="px-4 py-2 text-sm bg-orange-600 hover:bg-orange-700"
                    >
                      {saving || uploadingFiles ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          {uploadingFiles ? '파일 업로드 중...' : '저장 중...'}
                        </>
                      ) : (
                        <>
                          <Save className="w-4 h-4 mr-2" />
                          저장
                        </>
                      )}
                    </Button>
                  </div>


                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
} 